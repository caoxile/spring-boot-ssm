<?xml version="1.0" encoding="UTF-8"?>
<!--
debug:当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。
scan:当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true.
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为1分钟。
-->
<configuration debug="false" scan="true" scanPeriod="30 seconds">
    <!-- 设置 logger context 名称,一旦设置不可改变，默认为default -->
    <contextName>spring-boot-ssm</contextName>

    <property name="log_dir" value="./logs"/>
    <property name="log_name" value="spring-boot-ssm"/>

    <!--输出到控制台-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--输出格式-->
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} | %msg%n</pattern>
        </encoder>
    </appender>

    <!--输出到文件中-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前活动日志文件名 -->
        <file>${log_dir}/${log_name}.log</file>
        <!-- 文件滚动策略,按照时间滚动，此处为每天产生一个文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 输出的文件名称.“.zip或.gz结尾”,表示归档文件自动压缩 -->
            <FileNamePattern>${log_dir}/${log_name}.%d{yyyyMMdd}.log.zip</FileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>10</maxHistory>
        </rollingPolicy>

        <!--rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log_dir}%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>20MB</maxFileSize>
        </triggeringPolicy-->

        <!-- <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
          rollover daily
          <fileNamePattern>${log_dir}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
           each file should be at most 30MB, keep 60 days worth of history, but at most 20GB
           <maxFileSize>30MB</maxFileSize>
           <maxHistory>60</maxHistory>
           <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy> -->


        <encoder>
            <!--输出格式-->
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} | %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 日志级别若没显示定义，则继承最近的父logger（该logger需显示定义level,直到rootLogger）的日志级别-->
    <!-- logger的appender默认具有累加性（默认日志输出到当前logger的appender和所有祖先logger的appender中），可通过配置 “additivity”属性修改默认行为-->
    <!-- additivity 属性为 false ，表示此 logger 的打印信息不再向上级传递,root不会再次打印 -->
    <logger name="com.company"  level="ERROR" additivity="false" >
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE"/>
    </logger>

    <!-- root节点是必选节点，用来指定最基础的日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>

</configuration>